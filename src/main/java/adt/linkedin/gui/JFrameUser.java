/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package adt.linkedin.gui;

import adt.linkedin.model.*;
import adt.linkedin.services.CompanyService;
import adt.linkedin.services.UserService;
import adt.linkedin.tools.Utils;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dev
 */
public class JFrameUser extends javax.swing.JFrame {

    final User user;
    final UserService userController;
    final CompanyService companyController = new CompanyService();
    private final List<AcademicInfo> deletedInfo = new ArrayList<>();
    private final List<Skill> deletedSkills = new ArrayList<>();
    private final List<WorkExperience> deletedExperiences = new ArrayList<>();
    private final Timer timer = new Timer(3000, new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent ae) {
            refreshTable(jTableAcademicInfo, 1);
            refreshTable(jTableSkills, 2);
            refreshTable(jTableExperience, 3);
        }
    });

    /**
     * Creates new form User
     *
     * @param user gets the instance of the logged user
     * @param service tool to make all the queries
     */
    public JFrameUser(User user, UserService service) {
        this.user = user;
        this.userController = service;
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        initComponents();
        this.jPanel1.setBounds(2, 2, JFrame.MAXIMIZED_HORIZ, JFrame.MAXIMIZED_VERT);
        fillTable(jTableAcademicInfo, 1);
        fillTable(jTableSkills, 2);
        fillTable(jTableExperience, 3);
        this.jButtonHome.setBackground(Utils.PURPLE);
        timer.start();
        this.jLabelUserName.setText(this.user.getName());
        this.jTextAreaDescription.setText(this.user.getDescription());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanelUser = new javax.swing.JPanel();
        jLabelUserPic = new javax.swing.JLabel();
        jLabelHeader = new javax.swing.JLabel();
        jLabelUserName = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableSkills = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAcademicInfo = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableExperience = new javax.swing.JTable();
        jLabelLogOut = new javax.swing.JLabel();
        jLabelDelete = new javax.swing.JLabel();
        jButtonAddAI = new javax.swing.JButton();
        jButtonAddSkill = new javax.swing.JButton();
        jButtonAddExperience = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaDescription = new javax.swing.JTextArea();
        jButtonHome = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(java.awt.Color.lightGray);
        jPanel1.setPreferredSize(this.getPreferredSize());

        jPanelUser.setBackground(new java.awt.Color(255, 255, 255));
        jPanelUser.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.black, java.awt.Color.black));
        jPanelUser.setPreferredSize(this.jPanel1.getPreferredSize());
        jPanelUser.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelUserPic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/defaultpic.png"))); // NOI18N
        jLabelUserPic.setText("jLabel2");
        jLabelUserPic.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(153, 102, 255)));
        jLabelUserPic.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelUserPicMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelUserPicMouseEntered(evt);
            }
        });
        jPanelUser.add(jLabelUserPic, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 60, 91, 91));

        jLabelHeader.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/image.png"))); // NOI18N
        jPanelUser.add(jLabelHeader, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 2, 960, 90));

        jLabelUserName.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        jLabelUserName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelUserName.setText("User");
        jPanelUser.add(jLabelUserName, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 180, -1));

        jScrollPane3.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 102, 255), null));

        jTableSkills.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Skills"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableSkills.getTableHeader().setReorderingAllowed(false);
        jTableSkills.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableSkillsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTableSkills);
        if (jTableSkills.getColumnModel().getColumnCount() > 0) {
            jTableSkills.getColumnModel().getColumn(0).setResizable(false);
        }

        jPanelUser.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 320, 530, 196));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 102, 255), null));

        jTableAcademicInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TÃ­tulo", "Centro", "Nota media", "Inicio", "Fin"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAcademicInfo.setAutoscrolls(false);
        jTableAcademicInfo.setGridColor(new java.awt.Color(255, 255, 255));
        jTableAcademicInfo.setSelectionBackground(new java.awt.Color(153, 102, 255));
        jTableAcademicInfo.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jTableAcademicInfo.getTableHeader().setReorderingAllowed(false);
        jTableAcademicInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableAcademicInfoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableAcademicInfo);
        if (jTableAcademicInfo.getColumnModel().getColumnCount() > 0) {
            jTableAcademicInfo.getColumnModel().getColumn(0).setResizable(false);
            jTableAcademicInfo.getColumnModel().getColumn(1).setResizable(false);
            jTableAcademicInfo.getColumnModel().getColumn(2).setResizable(false);
            jTableAcademicInfo.getColumnModel().getColumn(4).setResizable(false);
        }

        jPanelUser.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 110, 530, 190));

        jScrollPane2.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 102, 255), null));

        jTableExperience.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Puesto", "Empresa", "Ciudad", "Inicio", "Fin"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableExperience.getTableHeader().setReorderingAllowed(false);
        jTableExperience.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableExperienceMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableExperience);
        if (jTableExperience.getColumnModel().getColumnCount() > 0) {
            jTableExperience.getColumnModel().getColumn(0).setResizable(false);
        }

        jPanelUser.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 560, 530, 220));

        jLabelLogOut.setText("Log Out");
        jLabelLogOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelLogOutMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelLogOutMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabelLogOutMouseExited(evt);
            }
        });
        jPanelUser.add(jLabelLogOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 760, 110, 40));

        jLabelDelete.setText("Delete Account");
        jLabelDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelDeleteMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelDeleteMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabelDeleteMouseExited(evt);
            }
        });
        jPanelUser.add(jLabelDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 720, 110, 40));

        jButtonAddAI.setBackground(Utils.PURPLE);
        jButtonAddAI.setForeground(new java.awt.Color(255, 255, 255));
        jButtonAddAI.setText("+");
        jButtonAddAI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddAIActionPerformed(evt);
            }
        });
        jPanelUser.add(jButtonAddAI, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 110, -1, -1));

        jButtonAddSkill.setBackground(Utils.PURPLE);
        jButtonAddSkill.setForeground(new java.awt.Color(255, 255, 255));
        jButtonAddSkill.setText("+");
        jButtonAddSkill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddSkillActionPerformed(evt);
            }
        });
        jPanelUser.add(jButtonAddSkill, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 320, -1, -1));

        jButtonAddExperience.setBackground(Utils.PURPLE);
        jButtonAddExperience.setForeground(new java.awt.Color(255, 255, 255));
        jButtonAddExperience.setText("+");
        jButtonAddExperience.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddExperienceActionPerformed(evt);
            }
        });
        jPanelUser.add(jButtonAddExperience, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 560, -1, -1));

        jScrollPane4.setBorder(null);

        jTextAreaDescription.setEditable(false);
        jTextAreaDescription.setColumns(20);
        jTextAreaDescription.setLineWrap(true);
        jTextAreaDescription.setRows(5);
        jTextAreaDescription.setWrapStyleWord(true);
        jTextAreaDescription.setAlignmentX(Component.CENTER_ALIGNMENT);
        jTextAreaDescription.setBorder(null);
        jTextAreaDescription.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextAreaDescriptionMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTextAreaDescriptionMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jTextAreaDescriptionMouseExited(evt);
            }
        });
        jScrollPane4.setViewportView(jTextAreaDescription);

        jPanelUser.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, 170, 180));

        jButtonHome.setBackground(Utils.PURPLE);
        jButtonHome.setText("Home");
        jButtonHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHomeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(499, 499, 499)
                .addComponent(jPanelUser, javax.swing.GroupLayout.PREFERRED_SIZE, 796, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(280, 280, 280)
                .addComponent(jButtonHome)
                .addContainerGap(353, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonHome)
                    .addComponent(jPanelUser, javax.swing.GroupLayout.PREFERRED_SIZE, 868, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(195, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 2000, 1080));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean containsValue(JTable table, Skill skill) {
        String value;
        if (deletedSkills.contains(skill)) {
            return true;
        }
        if (table.getRowCount() > 0 && table.getColumnCount() > 0) {
            for (int i = 0; i < table.getRowCount(); i++) {
                value = (String) table.getValueAt(i, 0);
                if (value != null && value.equals(skill.getName())) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean containsValue(JTable table, AcademicInfo info) { //title + "  " + institution.getName() + "  " + meanScore + "  " + initDate + "  " + endDate;
        Object[] value;
        AcademicInfo aux;
        if (deletedInfo.contains(info)) {
            return true;
        }
        if (table.getRowCount() > 0 && table.getColumnCount() > 0) {
            for (int i = 0; i < table.getRowCount(); i++) {
                value = new Object[5];
                if (table.getValueAt(i, 0) != null) {
                    for (int j = 0; j < table.getColumnCount(); j++) {
                        value[j] = table.getValueAt(i, j);
                    }
                    if (value[4] instanceof LocalDate) {
                        aux = new AcademicInfo((String) value[0], new Institution((String) value[1]), (float) value[2], (LocalDate) value[3], (LocalDate) value[4]);
                    } else {
                        aux = new AcademicInfo((String) value[0], new Institution((String) value[1]), (float) value[2], (LocalDate) value[3]);
                    }
                    if ((aux.equals(info))) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean containsValue(JTable table, WorkExperience experience) {
        Object[] value;
        WorkExperience aux;
        if (deletedExperiences.contains(experience)) {
            return true;
        }
        if (table.getRowCount() > 0 && table.getColumnCount() > 0) {
            for (int i = 0; i < table.getRowCount(); i++) {
                value = new Object[5];
                if (table.getValueAt(i, 0) != null) {
                    for (int j = 0; j < table.getColumnCount(); j++) {
                        value[j] = table.getValueAt(i, j);
                    }
                    if (value[4] instanceof LocalDate) {
                        aux = new WorkExperience((String) value[0], companyController.getCompany((String) value[1]), (String) value[2], (LocalDate) value[3], (LocalDate) value[4]);
                    } else {
                        aux = new WorkExperience((String) value[0], companyController.getCompany((String) value[1]), (String) value[2], (LocalDate) value[3]);
                    }
                    if ((aux.equals(experience))) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private void refreshTable(JTable table, int option) {
        DefaultTableModel model;
        model = new DefaultTableModel();
        switch (option) {
            case 1:
                model.addColumn("TÃ­tulo");
                model.addColumn("Centro");
                model.addColumn("Nota Media");
                model.addColumn("Inicio");
                model.addColumn("Fin");
                break;
            case 2:
                model.addColumn("Habilidad");
                break;
            default:
                model.addColumn("Puesto");
                model.addColumn("Empresa");
                model.addColumn("Ciudad");
                model.addColumn("Inicio");
                model.addColumn("Fin");
                break;
        }
        table.setModel(model);
        fillTable(table, option);
    }

    private void fillAcademicInfo(DefaultTableModel model) {
        for (AcademicInfo info : userController.getUserAcademicInfo(user)) {
            if (!containsValue(jTableAcademicInfo, info)) {
                if (info.getEndDate() != null) {
                    model.addRow(new Object[]{info.getTitle(), info.getInstitution().getName(), info.getMeanScore(), info.getInitDate(), info.getEndDate()});
                } else {
                    model.addRow(new Object[]{info.getTitle(), info.getInstitution().getName(), info.getMeanScore(), info.getInitDate(), "Actual"});
                }
            }
        }
    }

    private void fillSkills(DefaultTableModel model) {
        for (Skill skill : userController.getUserSkills(user)) {
            if (!containsValue(jTableSkills, skill)) {
                model.addRow(new String[]{skill.toString()});
            }
        }
    }

    private void fillExperience(DefaultTableModel model) {
        for (WorkExperience experience : userController.getUserLaboralExperience(user)) {
            if (!containsValue(jTableExperience, experience)) {
                if (experience.getEndDate() != null) {
                    model.addRow(new Object[]{experience.getJobTitle(), experience.getCompany().getName(), experience.getLocation(), experience.getInitDate(), experience.getEndDate()});
                } else {
                    model.addRow(new Object[]{experience.getJobTitle(), experience.getCompany().getName(), experience.getLocation(), experience.getInitDate(), "Actual"});
                }
            }
        }
    }

    private void fillTable(JTable table, int option) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        switch (option) {
            case 1: //AcademicInfo
                fillAcademicInfo(model);
                break;
            case 2: //Skills
                fillSkills(model);
                break;
            default: //Experience
                fillExperience(model);
                break;
        }
        table.setModel(model);
    }

    private void jButtonHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHomeActionPerformed
        new Feed(user, userController).setVisible(true);
        dispose();
    }//GEN-LAST:event_jButtonHomeActionPerformed

    private void jLabelLogOutMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelLogOutMouseEntered

        Utils.mouseEntered(this.jLabelLogOut);
    }//GEN-LAST:event_jLabelLogOutMouseEntered

    private void jLabelLogOutMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelLogOutMouseExited

        Utils.mouseExited(this.jLabelLogOut);
    }//GEN-LAST:event_jLabelLogOutMouseExited

    private void jLabelLogOutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelLogOutMouseClicked

        String buttons[] = {"Salir", "Cancelar"};
        int option = JOptionPane.showOptionDialog(this, "Â¿Realmente desea cerrar la sesiÃ³n?", "Cierre de sesiÃ³n",
                0, 0, null, buttons, this);
        if (option == JOptionPane.YES_OPTION) {
            new LogIn().setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_jLabelLogOutMouseClicked

    private void jButtonAddAIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddAIActionPerformed

        new JDialogAddAcademicInfo(userController, user, this, true).setVisible(true);
    }//GEN-LAST:event_jButtonAddAIActionPerformed

    private void jButtonAddSkillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddSkillActionPerformed

        new JDialogAddSkill(userController, user, this, true).setVisible(true);
    }//GEN-LAST:event_jButtonAddSkillActionPerformed

    private void jTextAreaDescriptionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextAreaDescriptionMouseClicked

        new JDialogAddDescription(userController, user, this, true, this.jTextAreaDescription).setVisible(true);
    }//GEN-LAST:event_jTextAreaDescriptionMouseClicked

    private void jTextAreaDescriptionMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextAreaDescriptionMouseEntered

        this.jTextAreaDescription.setToolTipText("Click para cambiar la descripciÃ³n");

    }//GEN-LAST:event_jTextAreaDescriptionMouseEntered

    private void jTextAreaDescriptionMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextAreaDescriptionMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextAreaDescriptionMouseExited

    private void jLabelDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelDeleteMouseClicked

        String buttons[] = {"Eliminar cuenta", "Cancelar"};
        String confirmButtons[] = {"SI", "Cancelar"};
        int option = JOptionPane.showOptionDialog(this, "Esta acciÃ³n es irreversible, piÃ©nsalo dos veces...", "Eliminar cuenta",
                0, 0, null, buttons, this);
        if (option == JOptionPane.YES_OPTION) {
            int confirmOption = JOptionPane.showOptionDialog(this, "Â¿Seguro que quieres borrar tu cuenta?",
                    "Eliminar cuenta", 0, 0, null, confirmButtons, this);
            if (confirmOption == JOptionPane.YES_OPTION) {
                this.userController.removeUser(user);
                new LogIn().setVisible(true);
                dispose();
            }
        }

    }//GEN-LAST:event_jLabelDeleteMouseClicked

    private void jLabelDeleteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelDeleteMouseEntered

        Utils.mouseEntered(jLabelDelete);
    }//GEN-LAST:event_jLabelDeleteMouseEntered

    private void jLabelDeleteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelDeleteMouseExited

        Utils.mouseExited(jLabelDelete);
    }//GEN-LAST:event_jLabelDeleteMouseExited

    private void jTableAcademicInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAcademicInfoMouseClicked
        int selectedRow = this.jTableAcademicInfo.getSelectedRow();
        if (SwingUtilities.isLeftMouseButton(evt)) {
            try {
                JPopupMenu pop = initPopup(selectedRow, 1);
                pop.show(evt.getComponent(), evt.getX(), evt.getY());
            } catch (NullPointerException nEx) {
                JOptionPane.showMessageDialog(null, "Error desconocido", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_jTableAcademicInfoMouseClicked

    private void jTableSkillsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableSkillsMouseClicked
        int selectedRow = jTableSkills.getSelectedRow();
        if (SwingUtilities.isLeftMouseButton(evt)) {
            try {
                JPopupMenu pop = initPopup(selectedRow, 2);
                pop.show(evt.getComponent(), evt.getX(), evt.getY());
            } catch (NullPointerException nEx) {
                JOptionPane.showMessageDialog(null, "Error desconocido", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jTableSkillsMouseClicked

    private void jTableExperienceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableExperienceMouseClicked
        int selectedRow = jTableExperience.getSelectedRow();
        if (SwingUtilities.isLeftMouseButton(evt)) {
            try {
                JPopupMenu pop = initPopup(selectedRow, 3);
                pop.show(evt.getComponent(), evt.getX(), evt.getY());
            } catch (NullPointerException nEx) {
                JOptionPane.showMessageDialog(null, "Error desconocido", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jTableExperienceMouseClicked

    private void jButtonAddExperienceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddExperienceActionPerformed

        new JDialogAddExperience(userController, user, this, true).setVisible(true);
    }//GEN-LAST:event_jButtonAddExperienceActionPerformed

    private void jLabelUserPicMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelUserPicMouseEntered

        this.jLabelUserPic.setToolTipText("Click para cambiar foto de perfil");
    }//GEN-LAST:event_jLabelUserPicMouseEntered

    private void jLabelUserPicMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelUserPicMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabelUserPicMouseClicked

    private JPopupMenu initPopup(int selectedRow, int option) {
        JPopupMenu pop = new JPopupMenu();
        JMenuItem delete = new JMenuItem("Eliminar InformaciÃ³n");
        JMenuItem change = new JMenuItem("Ver");
        getDeleteItem(delete, option, selectedRow);
        getDetailsItem(change, option, selectedRow);
        switch (option) {
            case 1:
                pop.add(change);
                pop.add(delete);
                refreshTable(jTableAcademicInfo, option);
                break;
            case 2:
                pop.add(delete);
                refreshTable(jTableSkills, option);
                break;
            default:
                pop.add(change);
                pop.add(delete);
                refreshTable(jTableExperience, option);
                break;
        }
        return pop;
    }

    private void getDetailsItem(JMenuItem item, int option, int selectedRow) {
        if (option == 1) {
            item.addActionListener((ActionEvent e) -> {
                new JDialogSeeInfoDetails(userController, user, this, true, user.getAcademics().get(selectedRow)).setVisible(true);
            });
        } else {
            item.addActionListener((ActionEvent e) -> {
                new JDialogSeeExperienceDetails(userController, user, this, true, user.getExperiences().get(selectedRow)).setVisible(true);
            });
        }
    }

    private void getDeleteItem(JMenuItem item, int option, int selectedRow) {
        switch (option) {
            case 1:
                item.addActionListener((ActionEvent e) -> { //TODO PREGUNTAR A ISMA PORQUE NO LO BORRA DE LA BBDD
                    System.out.println("--------------------------------------------------------------");
                    deletedInfo.add(this.user.getAcademics().get(selectedRow));
                    System.out.println("antes del borrado: " + this.user.getAcademics());
                    this.user.getAcademics().remove(selectedRow);
                    System.out.println("antes del actualizado: " + this.user.getAcademics());
                    this.userController.updateUser(user);
                    System.out.println("despues del actualizado: " + this.user.getAcademics());
                });
                break;
            case 2:
                item.addActionListener((ActionEvent e) -> {
                    this.deletedSkills.add(this.user.getSkills().get(selectedRow));
                    this.user.getSkills().remove(selectedRow);
                    this.userController.updateUser(user);
                });
                break;
            default:
                item.addActionListener((ActionEvent e) -> {
                    deletedExperiences.add(this.user.getExperiences().get(selectedRow));
                    this.user.getExperiences().remove(selectedRow);
                    this.userController.updateUser(user);
                });
                break;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddAI;
    private javax.swing.JButton jButtonAddExperience;
    private javax.swing.JButton jButtonAddSkill;
    private javax.swing.JButton jButtonHome;
    private javax.swing.JLabel jLabelDelete;
    private javax.swing.JLabel jLabelHeader;
    private javax.swing.JLabel jLabelLogOut;
    private javax.swing.JLabel jLabelUserName;
    private javax.swing.JLabel jLabelUserPic;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelUser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTableAcademicInfo;
    private javax.swing.JTable jTableExperience;
    private javax.swing.JTable jTableSkills;
    private javax.swing.JTextArea jTextAreaDescription;
    // End of variables declaration//GEN-END:variables
}
